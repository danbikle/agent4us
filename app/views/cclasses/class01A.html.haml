%h1 Class01A

%p This class is under construction.
%hr/

%p This class summarizes concepts presented in a video lecture:

%a(href='https://youtu.be/fOMVZXLjKYo' target='x')
  https://youtu.be/fOMVZXLjKYo

%p Obviously the above video is on youtube.com but also it is inside Coursera:

%p
  %a(href='https://www.coursera.org/learn/cryptocurrency' target='x')
    https://www.coursera.org/learn/cryptocurrency
    
%p
  Coursera is inspiration for some of the structure behind this site:
  %a(href='/' target='x')
    cryp4.us
  
 
%p You do not need to actually watch the video.

%p Most of the things you need to remember from the video are listed on the page before you.

%p Additionally this page offers you exercises.

%p If you do or enhance the exercises, you will encounter a learning experience which is more effective than just watching the video.

%hr/

%h2#top Concepts/Topics
%ul
  %li
    %a(href='#hash_function')      Hash Function
  %li
    %a(href='#cryp_hash_function') Cryptographic Hash Function
  %li
    %a(href='#c_free')             Collision Free
  %li
    %a(href='#comm_s')             Commitment Scheme
  %li
    %a(href='#puzzle')             Puzzle Friendly
  %li
    %a(href='#compare2')           Compare 2 Files With Hash-Digests
  %li
    %a(href='#rock')               Hidden Rock,Paper,Scissors Commitment

%hr/
%h3#hash_function Hash Function

%p q: What is a Hash Function?

%p
  %a(href='https://www.google.com/search?q=What+is+a+hash+function?' target='x')
    https://www.google.com/search?q=What+is+a+hash+function?
    
%p.p_dark_green
  Code Exercise:
  %br/
  Create a hash function (not a cryptographic hash function) which accepts a string and outputs a string of 256 bits.

%p Solution-Idea:
%ul
  %li Get the input string, input_s
  %li Maybe the string is too short
  %li add a 256 bit string to end of input_s 
  %li return first 256 bits of input_s

%p Python Solution

.syntax
  %pre
    =render 'class01A10'

%p Python Output

.syntax
  %pre
    =render 'class01A11'
%p The above hash function works well.
%p The function, however, lacks a feature called: "Hiding".
%p I can see information about the input string by studying the output string.
%p Another feature it lacks is "Collision Avoidance".
%p The input strings listed below would all "Collide" meaning that the hash function would generate identical output for each string:

%ul
  %li "Today is Dec 27, 2017 and the weather in California is perfect."
  %li "Today is Dec 27, 2017 and the we123abc"
  %li "Today is Dec 27, 2017 and the weather in Boston is cold."
  %li "Today is Dec 27, 2017 and the weird thing about carbon is ..."

%p Java Solution

%p I present the Java Solution using an idea called "Outside-In".

%p The "Outside" is a shell script, hash01j.bash, which compiles a Java file.
%p Then the shell script runs a Java-class file.
%p I created a shell script which looks like the script below:

.syntax
  %pre
    =render 'class01A12'
    
%p I placed the above script in this folder:
.syntax
  %pre
    %code ~/cryp4/public/class01A/
    
%p Now that the "Outside" is done, I can create the "Inside" which in this case is a simple Java-file.

%p On my laptop I created Java-file named Main.java and I placed it in a folder below the shell script:

.syntax
  %pre
    %code ~/cryp4/public/class01A/src/us/cryp4/Main.java

%p Some beginners will be confused about proper folder structure of Java-apps.

%p After working with Java for a few days, a beginner will develop a sense for how to design a folder structure for a Java-app.

%p If you are a beginner it is wise to find a Java tutor who can guide you for a day or two while you learn through trial and error.

%p Another option is to find video training content.

%p For this Java-app, I placed hash01j.bash in
.syntax
  %pre
    %code ~/cryp4/public/class01A/
%p And I placed Main.java in
.syntax
  %pre
    %code ~/cryp4/public/class01A/src/us/cryp4/
    
%p Note that if a Java-app contains a package declaration, then that declaration will offer a small clue about proper folder structure.

%p If you study Main.java below you will see a package declaration:

.syntax
  %pre
    =render 'class01A13'

%p I used hash01j.bash to compile and run the above Java-file:

.syntax
  %pre
    =render 'class01A14'

%p When I compare Java to Python as a software based mechanism to learn Cryptocurrency technology, Python is a clear winner.

%p Python is easy to operate yet just as capable as Java.

%a(href='#top') Top
%hr/

%h3#cryp_hash_function Cryptographic Hash Function

%p q: What is a Cryptographic Hash Function?

%p
  %a(href='https://www.google.com/search?q=What+Is+A+Cryptographic+Hash+Function?' target='x')
    https://www.google.com/search?q=What+Is+A+Cryptographic+Hash+Function?

%p.p_dark_green
  Code Exercise:
  %br/
  Operate a popular Python implementation of a Cryptographic Hash Function.

%p Solution 1

.syntax
  %pre
    =render 'class01A14a'

%p Output 1

.syntax
  %pre
    =render 'class01A14b'

%p Solution 2

.syntax
  %pre
    =render 'class01A15'

%p Output 2

.syntax
  %pre.sbar999
    =render 'class01A16'

%p
  An interesting note about the above demo is
  that the hash function creates a string
  which can be decrypted back to the original input string.
%p
  Usually I do not need decryption,
  but if I encounter a use-case where decryption is needed,
  then the above demo will be useful.

%a(href='#top') Top

%hr/

%p.p_dark_green
  Code Exercise:
  %br/
  Instead of Python, operate a popular Java implementation of a Cryptographic Hash Function.
  
%p Solution 1

.syntax
  %pre
    =render 'class01A18'

%p After I wrote the above Java-file I placed it in this folder:

.syntax
  %pre
    %code ~/cryp4/public/class01A1/src/com/mkyong/test/Main.java

%p Next I wrote a shell script which had this path:

.syntax
  %pre
    %code ~/cryp4/public/class01A1/hash03j.bash

%p The shell script is displayed below:

.syntax
  %pre
    =render 'class01A20'

%p Then, I collected output from both the Java-file and the shell script:

.syntax
  %pre
    =render 'class01A22'

%a(href='#top') Top
%hr/

%h3#c_free Collision Free

%p The SHA-256 hash function will create a 256 bit "digest" AKA "hash" from any input string.

%p How many digests are possible?

%p I answer this by thinking about "small" hash functions.

%p A 1 bit hash function can return 2 values: 0 or 1.

%p A 2 bit hash function can return 4 values: 00, 01, 10, 11

%p A 3 bit hash function can return 4x2 values:
%ul
  %li 000, 001, 010, 011
  %li 100, 001, 110, 111

%p A 4 bit hash function can return 8x2 values:
%ul
  %li 0 in front of these:
  %li 000, 001, 010, 011
  %li 100, 001, 110, 111
  %li And then 1 instead of 0 in front of each:
  %li 000, 001, 010, 011
  %li 100, 001, 110, 111

%p The pattern I see above is that a N-bit hash function can return 2**N values.

%p So, a SHA-256 hash function can return 2**256 values which is about 1.16e+77.

%p According to wolframalpha.com the mass of the Sun is 1.99e+33 grams:

%p
  %a(href='http://www.wolframalpha.com/input/?i=what+is+the+mass+of+the+sun' target='x')
    http://www.wolframalpha.com/input/?i=what+is+the+mass+of+the+sun
  

%p So if I have 2**256 grams of solar-material, I could make 5.8e+43 Suns.

%p The point I make is that a SHA-256 hash function makes so many unique digests, that the probability I can find two strings which make the same hash, is near zero.

%p Question: If I make a trillion hashes per second, how many years will I need to make 2**256 hashes?
%p Answer: 1.16e+77 / 3600 / 24 / 365 / 1e+12   is   3.7e+57 years
%p 3.7e+57 years is about 1e+47 ages of the universe:

%p
  %a(href='http://www.wolframalpha.com/input/?i=what+is+the+age+of+the+universe' target='x')
    http://www.wolframalpha.com/input/?i=what+is+the+age+of+the+universe
  

%a(href='#top') Top
%hr/


%h3#comm_s Commitment Scheme (to demonstrate hiding property).

%p An idea, called: "Commitment", was presented in the video lecture.

%p Ed described a scenario where he "commits" a message to a piece of paper and puts the paper in an envelope in order to hide the message.

%p Later the envelope is opened by another.

%p Ed can then claim the message was created in the past and untampered with.

%p Why is this an interesting scenario?

%p This scenario might be interesting to a buyer or seller of a house.

%p Perhaps on Monday they verbally agree on a price of $500k.

%p The buyer borrows $500k on Tuesday.

%p On Wednesday the buyer offers $500k to complete the sale.

%p The dishonest seller lies, "The verbal agreement was for $501k. Pay me that."

%p The buyer will then understand that he should have written an untamperable "Commitment" on Monday.

%p In the above situation, the commitment could be visible.

%p Another common situation is when we want to make the commitment both hidden and untamperable.

%p For example a seller might create an auction on Thursday for a house which allows buyers to submit hidden bids until Saturday.

%p The commitment idea presented by Ed will allow the buyers to commit to a bid and keep the bid hidden until Saturday.

%p To implement the idea of a "Commitment", I will post software which allows two players to play "Rock-Paper-Scissors" over e-mail:

%p
  %a(href='https://www.google.com/search?q=what+is+game+rock+paper+scissors' target='x')
    https://www.google.com/search?q=what+is+game+rock+paper+scissors

%p The software will penalize cheaters. Stay tuned for that.

%p Until then, study the links below:

%p
  %a(href='https://www.google.com/search?q=cryptographic+commitment' target='x')
    https://www.google.com/search?q=cryptographic+commitment
%p
  %a(href='https://en.wikipedia.org/wiki/Commitment_scheme' target='x')
    https://en.wikipedia.org/wiki/Commitment_scheme
  

%a(href='#top') Top
%hr/

%h3#puzzle Puzzle Friendly

%p An idea, called: "Puzzle Friendly", was presented in the video lecture.

%p SHA-256 is a Puzzle Friendly hash-function.

%p I can use it to create a puzzle which is described below:

%ul
  %li Monday I pick a random integer, say 11988, between 0 and 1 trillion.
  %li I use SHA-256 to get create a cryptographic-commitment of 11988:
  %li
    %a(href='http://www.wolframalpha.com/input/?i=SHA-256+of+11988' target='x')
      http://www.wolframalpha.com/input/?i=SHA-256+of+11988
  %li I publish the commitment to the web:
  %li 807b f787 6346 ea99 fe2a 6c11 79f0 3e2e 4f8f 6d0d ae97 180d ded7 e2ab 6225 0ad9
  %li I offer $1 to anyone who can find an integer between 0 and 1 trillion which has a SHA-256 hash which matches the above hash.
  %li Tuesday you code a script which loops through all integers between 0 and 1 trillion.
  %li For each integer, you calculate its SHA-256 hash-digest.
  %li When your loop hits 11988 you will see a digest which matches my Monday digest.
  %li You send me 11988 via e-mail.
  %li I send you $1.

%a(href='#top') Top
%hr/

%p.p_dark_green
  Code Exercise:
  %br/
  Use Python to pick a random integer and then calculate its SHA-256 hash-digest.

%p A plausible answer is listed below:

.syntax
  %pre
    =render 'class01A24'

%p I ran the above script on my laptop and captured screen output for you:

.syntax
  %pre
    =render 'class01A26'

%a(href='#top') Top
%hr/

%p.p_dark_green
  Code Exercise:
  %br/
  Use Python to 'solve' the puzzle of finding the hash-digest of a specific integer.

%p A plausible answer is listed below:

.syntax
  %pre
    =render 'class01A28'

%p I ran the script and captured output:

.syntax
  %pre
    =render 'class01A30'

%a(href='#top') Top
%hr/

%p.p_dark_green
  Code Exercise:
  %br/
  Use Java to pick a random integer and then calculate its SHA-256 hash-digest.

%p I prefer to start each Java-exercise using an outside-in mindset.
%p This means I start with a shell script which should declare a folder structure for the Java-app.
%p Also the shell script should compile and then run the Java-app:

.syntax
  %pre
    =render 'class01A32'

%p I placed the above script in this folder:

.syntax
  %pre
    %code ~/cryp4/public/class01A2/

%p After I wrote the above shell script, I wrote the Java-file:

.syntax
  %pre
    =render 'class01A34'

%p Next I ran the shell script to both compile and run the Java-app:

.syntax
  %pre
    =render 'class01A36'

%a(href='#top') Top
%hr/


%p.p_dark_green
  Code Exercise:
  %br/
  Use Java to 'solve' the puzzle of finding the hash-digest of a specific integer.

%p I started this exercise by writing a shell script:

.syntax
  %pre
    =render 'class01A38'

%p Next I wrote a Java-app which is similar to the Python puzzle-solver:

.syntax
  %pre
    =render 'class01A40'

%p Next I ran the shell script to both compile and run the Java-app:

.syntax
  %pre
    =render 'class01A42'
    
%a(href='#top') Top
%hr/

%h3#compare2 Compare 2 Files With Hash-Digests

%p The lecture presents the idea of using hash-digests to compare two files.

%p A use-case for this idea is simple to imagine.

%p Suppose I backup a large file to a google-drive.

%p A year later, I restore the file to a new laptop.

%p How can I determine if the the file is the same?

%p The answer is for me to get a SHA-256 hash-digest of the file before I copy the file to google-drive.

%p The hash-digest is tiny so I store many copies of it in many places.

%p Then, a year later, I restore the file to a new laptop and get a SHA-256 hash-digest of the file.

%p Due to SHA-256 being collision-free, I can be confident that the restored file is unchanged if its digest matches the original digest.


%p.p_dark_green
  Code Exercise:
  %br/
  Use Python to get calculate a SHA-256 "secure-hash" AKA hash-digest of a large file.

.syntax
  %pre
    =render 'class01A44'

%p I ran the above script on my Ubuntu host and captured output:

.syntax
  %pre
    =render 'class01A46'

%a(href='#top') Top
%hr/


%p.p_dark_green
  Code Exercise:
  %br/
  Use Java to get calculate a SHA-256 "secure-hash" AKA hash-digest of a large file.

%p I started this exercise by writing a shell script:

.syntax
  %pre
    =render 'class01A47'

%p Next I wrote a Java-app:

.syntax
  %pre
    =render 'class01A48'

%p Then I ran the shell script which compiled and then ran the Java-app:

.syntax
  %pre
    =render 'class01A50'

%a(href='#top') Top
%hr/


%h3#rock Hidden Rock,Paper,Scissors Commitment

%p The lecture presents the idea of hiding simple messages in a Commitment.

%p The problem of a Commitment containing a simple message is that an adversary might guess the message before the author wants the message to be published.

%p For example, the message might be one string from an enumerable set of strings: Rock,Paper,Scissors

%p The lecture suggests that the author concatenate a random number with the message and then build the Commitment from the resulting random string.

%p At reveal time, the author will be expected to produce both the random number and the message.

%p The notation I use to remember this idea is simple: SHA-256(r|msg).


%p.p_dark_green
  Code Exercise:
  %br/
  Create a Python function which converts a msg into a random number, r, and SHA-256(r|msg).

.syntax
  %pre
    =render 'class01A52'

%a(href='#top') Top
%hr/
