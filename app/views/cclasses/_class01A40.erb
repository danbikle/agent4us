<code class='java'>
/*
Main.java

This app should solve a puzzle using a "Puzzle Friendly"
Cryptographic Hash function named SHA-256.

The idea is very simple; this script should 'search' for an integer in a range.

The approach will be simple: start at zero and try each integer in the range.

Ref:
http://cryp4.us/cclasses/class01A#puzzle
https://www.mkyong.com/java/java-sha-hashing-example/
 */

package us.cryp4;

import java.security.MessageDigest;

public class Main {

    public static void main(String[] args) throws Exception
    {

        /* I should find the integer, between 0 through 1e+4, which
         * gives this secure-hash via SHA-256:
         */
        String puzzle_hash_s = "2AC5B691FA275BE817B9C8CD1A90D23383CA77C1B20FA4058CAF3DE6260425D2";

        /* I should start solving by specifying a range of
         * integers. If the range is large, the puzzle will be difficult:
         */
        int range_i = (int) 1.0e4;
        int int_i;
        String digest_s = "";
        for (int_i = 0; int_i < range_i; int_i++) {
            // I should convert the number to a string and feed that string to SHA-256:
            String in_s = Integer.toString(int_i);
            MessageDigest my_hashlib = MessageDigest.getInstance("SHA-256");
            my_hashlib.update(in_s.getBytes());
            byte hash_b[] = my_hashlib.digest();
            // I should convert to String so I can compare it:
            String hash_s = javax.xml.bind.DatatypeConverter.printHexBinary(hash_b);
            if (hash_s.equals(puzzle_hash_s)) {
                System.out.println("I solved the puzzle. the integer is: "+int_i);
                break;
            }
        }
    }
}
</code>
